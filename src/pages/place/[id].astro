---
import type { GetStaticPaths } from 'astro';
import { actions } from 'astro:actions';

import MainLayout from '../../layouts/MainLayout.astro';
import Stars from '../../components/Stars.astro';
import { Image } from 'astro:assets';
import Availability from '../../components/Availability.astro';

interface PathItem {
  params: { id: string | number };
  props: { place: any };
}

export const getStaticPaths = (async (): Promise<PathItem[]> => {
  const { data, error } = await Astro.callAction(actions.getPlaces, {});
  if (!data) {
    throw new Error('No data returned from getPlaces');
  }

  return data.map((place: any) => ({
    params: {
      id: place.id,
    },
    props: {
      place,
    },
  }));
}) satisfies GetStaticPaths;

const { id } = Astro.params;
const { place } = Astro.props;

const imageUrl = `/assets/images/${place.image}`;
---

<MainLayout>
  <div class="grid grid-cols-2 gap-2">
    <div class="bg-white/80 p-5 rounded-xl">
      <h1 class="text-2xl font-extrabold">#{id} {place.title}</h1>
      <p>{place.description}</p>

      <div class="flex flex-1">
        {Array.from({ length: Number(place.avg_rating) }).map((_) => <Stars />)}
      </div>

      <!-- TODO: Server Island -->
      <Availability server:defer placeId={place.id.toString()}>
        <p
          slot="fallback"
          class="bg-gray-300 mt-5 text-center rounded-xl p-2 animate-pulse"
        >
          Espere
        </p>
      </Availability>

      <!-- <p class="bg-blue-300 mt-5 text-center rounded-xl p-2">Disponibles</p>
      <p class="bg-red-300 mt-5 text-center rounded-xl p-2">No Disponible</p> -->
    </div>

    <div>
      <Image
        src={imageUrl}
        class="w-full h-96 object-cover rounded-xl"
        width="800"
        height="800"
        alt={place.title}
      />
    </div>
  </div>
</MainLayout>